{"ast":null,"code":"var _jsxFileName = \"/Users/shawnmorreau/Desktop/shawnmorreau.github.io/Backend/FrontEnd/src/Card/CardV1/CardV1.js\";\nimport React from \"react\";\nimport SkillContainerV1 from \"./SkillContainerV1.js\";\nimport \"./CardStyling.css\";\nimport Content from \"./Content.json\";\nexport default class extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      cards: [{\n        key: 0,\n        title: \"Web Development\",\n        skills: [{\n          key: 0,\n          value: \"React\",\n          content: \"\"\n        }, {\n          key: 1,\n          value: \"SCSS\",\n          content: \"aha\"\n        }],\n        active: {}\n      }, {\n        key: 1,\n        title: \"Personal\",\n        skills: [{\n          key: 0,\n          value: \"Jaymee\",\n          content: \"and Jaymee loves me\"\n        }],\n        active: {}\n      }, {\n        key: 2,\n        title: \"Anotha One\",\n        skills: [{\n          key: 0,\n          value: \"being big op\",\n          content: \"biiiig op\"\n        }],\n        active: {}\n      }]\n    };\n\n    this.getSkillObjectFromState = name => {\n      let val = this.state.cards.map(x => x.skills.filter(element => element.value === name));\n      val = val.filter(item => item.length !== 0);\n      return val[0][0];\n    };\n\n    this.getSkillCard = key => {\n      return this.state.cards[key];\n    };\n\n    this.clearActive = key => {\n      const cardSelected = this.state.cards[key].active;\n      this.setState({\n        [cardSelected]: {}\n      });\n    };\n\n    this.getCardIndex = obj => {\n      const selectedCard = this.state.cards.filter((x, i) => x.skills.includes(obj));\n      return selectedCard[0].key;\n    };\n\n    this.updateActive = name => {\n      const skillObject = this.getSkillObjectFromState(name);\n      const cardIndex = this.getCardIndex(skillObject);\n      this.clearActive(cardIndex);\n      let newState = Object.assign({}, this.state);\n      newState.cards[cardIndex].active = skillObject;\n      this.setState(newState);\n    };\n  }\n\n  componentDidMount() {\n    let x = JSON.stringify(Content);\n    x = JSON.parse(x);\n    console.log(x.array);\n  } //look into if there's a better way of doing this?\n\n\n  render() {\n    const card = this.state.cards.map((skill, i) => React.createElement(SkillContainerV1, {\n      key: i,\n      title: skill.title,\n      skills: skill.skills,\n      active: skill.active,\n      updateActive: this.updateActive,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }));\n    return React.createElement(\"div\", {\n      className: \"cardContainer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, card);\n  }\n\n}","map":{"version":3,"sources":["/Users/shawnmorreau/Desktop/shawnmorreau.github.io/Backend/FrontEnd/src/Card/CardV1/CardV1.js"],"names":["React","SkillContainerV1","Content","Component","state","cards","key","title","skills","value","content","active","getSkillObjectFromState","name","val","map","x","filter","element","item","length","getSkillCard","clearActive","cardSelected","setState","getCardIndex","obj","selectedCard","i","includes","updateActive","skillObject","cardIndex","newState","Object","assign","componentDidMount","JSON","stringify","parse","console","log","array","render","card","skill"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport SkillContainerV1 from \"./SkillContainerV1.js\";\nimport \"./CardStyling.css\";\nimport Content from \"./Content.json\";\nexport default class extends React.Component {\n    state = {\n        cards: [{\n            key: 0,\n            title: \"Web Development\",\n            skills: [\n                { key: 0, value: \"React\", content:\"\"}, \n                { key: 1, value: \"SCSS\",content :\"aha\" }\n            ],\n            active:{}\n        },\n        {\n            key: 1,\n            title: \"Personal\",\n            skills: [\n                { key: 0, value: \"Jaymee\" , content:\"and Jaymee loves me\"}\n            ],\n            active:{}\n        },\n        {\n            key: 2,\n            title: \"Anotha One\",\n            skills: [\n                { key: 0, value: \"being big op\", content:\"biiiig op\"}\n            ],\n            active:{},\n        },\n        ],\n    }\n    componentDidMount(){\n        let x = JSON.stringify(Content);\n        x = (JSON.parse(x));\n        console.log(x.array);\n        \n    }\n    //look into if there's a better way of doing this?\n    getSkillObjectFromState=(name)=>{\n        let val= this.state.cards.map(x=>\n            x.skills.filter(element => \n                element.value === name\n            )\n        );\n        val = val.filter(item => item.length!==0)\n        return val[0][0];\n    }\n    getSkillCard=(key)=>{\n        return this.state.cards[key];\n    }\n    clearActive=(key)=>{\n        const cardSelected=this.state.cards[key].active;\n        this.setState({[cardSelected]:{}})\n    }\n    getCardIndex=(obj)=>{\n        const selectedCard = this.state.cards.filter((x,i)=>(\n            x.skills.includes(obj)\n        ));\n        return (selectedCard[0].key);\n    }\n    updateActive=(name)=>{\n        const skillObject = this.getSkillObjectFromState(name);\n        const cardIndex = this.getCardIndex(skillObject);\n        this.clearActive(cardIndex);\n\n        \n        let newState = Object.assign({},this.state);\n        newState.cards[cardIndex].active = skillObject;\n        this.setState(newState);\n    }\n    render() {\n        const card = this.state.cards.map((skill,i)=>(\n            <SkillContainerV1\n                key={i}\n                title={skill.title}\n                skills={skill.skills}\n                active={skill.active}\n                updateActive={this.updateActive}\n            />\n        ));\n        return (\n            \n            <div className =\"cardContainer\">\n                    {card}\n            </div>\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}