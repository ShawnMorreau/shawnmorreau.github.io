{"ast":null,"code":"var _jsxFileName = \"/Users/shawnmorreau/Desktop/shawnmorreau.github.io/Backend/FrontEnd/src/Jaymee/Timer.js\";\nimport React, { useEffect } from \"react\";\nimport \"./Styling/Styling.css\";\n\nfunction renderElapsedString(elapsed, runningSince) {\n  let totalElapsed = elapsed;\n\n  if (runningSince) {\n    totalElapsed += Date.now() - runningSince;\n  }\n\n  return millisecondsToHuman(totalElapsed);\n}\n\nfunction millisecondsToHuman(ms) {\n  const seconds = Math.floor(ms / 1000 % 60);\n  const minutes = Math.floor(ms / 1000 / 60 % 60);\n  const hours = Math.floor(ms / 1000 / 60 / 60);\n  const humanized = [pad(hours.toString(), 2), pad(minutes.toString(), 2), pad(seconds.toString(), 2)].join(':');\n  return humanized;\n}\n\nfunction pad(numberString, size) {\n  let padded = numberString;\n\n  while (padded.length < size) padded = `0${padded}`;\n\n  return padded;\n}\n\nexport default class extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {};\n  }\n\n  componentDidMount() {\n    const testTime = new Date(2020, 3, 28, 23, 33, 40);\n    console.log(testTime);\n    this.interval = setInterval(() => this.setState({\n      time: renderElapsedString(testTime - Date.now(), 0)\n    }), 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  render() {\n    if (this.state.time === \"00:00:00\") {\n      this.props.changeDate();\n    }\n\n    console.log(this.state.time === \"00:00:00\");\n    return React.createElement(\"div\", {\n      className: \"timer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, this.state.time));\n  }\n\n}","map":{"version":3,"sources":["/Users/shawnmorreau/Desktop/shawnmorreau.github.io/Backend/FrontEnd/src/Jaymee/Timer.js"],"names":["React","useEffect","renderElapsedString","elapsed","runningSince","totalElapsed","Date","now","millisecondsToHuman","ms","seconds","Math","floor","minutes","hours","humanized","pad","toString","join","numberString","size","padded","length","Component","state","componentDidMount","testTime","console","log","interval","setInterval","setState","time","componentWillUnmount","clearInterval","render","props","changeDate"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAO,uBAAP;;AAEA,SAASC,mBAAT,CAA6BC,OAA7B,EAAsCC,YAAtC,EAAoD;AAChD,MAAIC,YAAY,GAAGF,OAAnB;;AACA,MAAIC,YAAJ,EAAkB;AAChBC,IAAAA,YAAY,IAAIC,IAAI,CAACC,GAAL,KAAaH,YAA7B;AACD;;AACD,SAAOI,mBAAmB,CAACH,YAAD,CAA1B;AACD;;AAED,SAASG,mBAAT,CAA6BC,EAA7B,EAAiC;AAC/B,QAAMC,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAYH,EAAE,GAAG,IAAN,GAAc,EAAzB,CAAhB;AACA,QAAMI,OAAO,GAAGF,IAAI,CAACC,KAAL,CAAYH,EAAE,GAAG,IAAL,GAAY,EAAb,GAAmB,EAA9B,CAAhB;AACA,QAAMK,KAAK,GAAGH,IAAI,CAACC,KAAL,CAAWH,EAAE,GAAG,IAAL,GAAY,EAAZ,GAAiB,EAA5B,CAAd;AAEA,QAAMM,SAAS,GAAG,CAChBC,GAAG,CAACF,KAAK,CAACG,QAAN,EAAD,EAAmB,CAAnB,CADa,EAEhBD,GAAG,CAACH,OAAO,CAACI,QAAR,EAAD,EAAqB,CAArB,CAFa,EAGhBD,GAAG,CAACN,OAAO,CAACO,QAAR,EAAD,EAAqB,CAArB,CAHa,EAIhBC,IAJgB,CAIX,GAJW,CAAlB;AAMA,SAAOH,SAAP;AACD;;AACD,SAASC,GAAT,CAAaG,YAAb,EAA2BC,IAA3B,EAAiC;AAC/B,MAAIC,MAAM,GAAGF,YAAb;;AACA,SAAOE,MAAM,CAACC,MAAP,GAAgBF,IAAvB,EAA6BC,MAAM,GAAI,IAAGA,MAAO,EAApB;;AAC7B,SAAOA,MAAP;AACD;;AACH,eAAe,cAAcrB,KAAK,CAACuB,SAApB,CAA6B;AAAA;AAAA;AAAA,SACxCC,KADwC,GAClC,EADkC;AAAA;;AAExCC,EAAAA,iBAAiB,GAAG;AAChB,UAAMC,QAAQ,GAAG,IAAIpB,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkB,EAAlB,EAAsB,EAAtB,EAA0B,EAA1B,EAA8B,EAA9B,CAAjB;AACAqB,IAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AAEA,SAAKG,QAAL,GAAgBC,WAAW,CAAC,MAAM,KAAKC,QAAL,CAAc;AAAEC,MAAAA,IAAI,EAAE9B,mBAAmB,CAACwB,QAAQ,GAAGpB,IAAI,CAACC,GAAL,EAAZ,EAAuB,CAAvB;AAA3B,KAAd,CAAP,EAA6E,IAA7E,CAA3B;AACD;;AACD0B,EAAAA,oBAAoB,GAAG;AACrBC,IAAAA,aAAa,CAAC,KAAKL,QAAN,CAAb;AACD;;AACHM,EAAAA,MAAM,GAAE;AACN,QAAG,KAAKX,KAAL,CAAWQ,IAAX,KAAoB,UAAvB,EAAkC;AAChC,WAAKI,KAAL,CAAWC,UAAX;AACD;;AACDV,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKJ,KAAL,CAAWQ,IAAX,KAAoB,UAAhC;AACE,WACI;AAAK,MAAA,SAAS,EAAG,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI,KAAKR,KAAL,CAAWQ,IAAf,CADJ,CADJ;AAKH;;AArBuC","sourcesContent":["import React, {useEffect} from \"react\";\nimport \"./Styling/Styling.css\";\n\nfunction renderElapsedString(elapsed, runningSince) {\n    let totalElapsed = elapsed;\n    if (runningSince) {\n      totalElapsed += Date.now() - runningSince;\n    }\n    return millisecondsToHuman(totalElapsed);\n  }\n\n  function millisecondsToHuman(ms) {\n    const seconds = Math.floor((ms / 1000) % 60);\n    const minutes = Math.floor((ms / 1000 / 60) % 60);\n    const hours = Math.floor(ms / 1000 / 60 / 60);\n\n    const humanized = [\n      pad(hours.toString(), 2),\n      pad(minutes.toString(), 2),\n      pad(seconds.toString(), 2),\n    ].join(':');\n\n    return humanized;\n  }\n  function pad(numberString, size) {\n    let padded = numberString;\n    while (padded.length < size) padded = `0${padded}`;\n    return padded;\n  }\nexport default class extends React.Component{\n    state={}\n    componentDidMount() {\n        const testTime = new Date(2020, 3, 28, 23, 33, 40);\n        console.log(testTime);\n        \n        this.interval = setInterval(() => this.setState({ time: renderElapsedString(testTime - Date.now(),0)}), 1000);\n      }\n      componentWillUnmount() {\n        clearInterval(this.interval);\n      }\n    render(){\n      if(this.state.time === \"00:00:00\"){\n        this.props.changeDate();\n      }\n      console.log(this.state.time === \"00:00:00\");\n        return(\n            <div className = \"timer\">\n                <p>{this.state.time}</p>\n            </div>\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}