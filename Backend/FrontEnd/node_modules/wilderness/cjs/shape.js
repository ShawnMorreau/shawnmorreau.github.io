'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /* globals __DEV__ */

var _wildernessDomNode = require('wilderness-dom-node');

var _wildernessCore = require('wilderness-core');

/**
 * Extends the Wilderness core shape function.
 * Adds the ability to pull keyframe attributes and points from a SVG DOM node.
 * Adds an optional replace property to a Shape, which is used during render.
 *
 * @param {(PlainShapeObject|Object)[]} props
 *
 * @returns {Shape}
 *
 * @example
 * shape({ el, style: '' }, { replace: el })
 */
var shape = function shape() {
  for (var _len = arguments.length, props = Array(_len), _key = 0; _key < _len; _key++) {
    props[_key] = arguments[_key];
  }

  var args = [];

  for (var i = 0, l = props.length; i < l; i++) {
    var prop = props[i];

    if (prop.el) {
      var p = _extends({}, (0, _wildernessDomNode.plainShapeObject)(prop.el), prop);

      delete p.el;

      args.push(p);
    }

    args.push(prop);
  }

  var s = _wildernessCore.shape.apply(undefined, args);

  var options = props.length > 1 && typeof props[props.length - 1].type === 'undefined' ? props[props.length - 1] : {};

  var replace = options.replace;

  if (replace) {
    if (process.env.NODE_ENV !== 'production' && ((typeof replace === 'undefined' ? 'undefined' : _typeof(replace)) !== 'object' || !replace.nodeName)) {
      throw new TypeError('The replace option must be a DOM node');
    }

    s.replace = replace;
  }

  return s;
};

exports.default = shape;