'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tick = exports.play = undefined;

var _wildernessCore = require('wilderness-core');

var _wildernessDomNode = require('wilderness-dom-node');

/**
 * Is the tick function running?
 */
/* globals __DEV__ */

var ticks = 0;

/**
 * Extends the Wilderness core play function.
 * Adds a call to the tick function.
 *
 * @param {Timeline} t
 * @param {PlaybackOptions} playbackOptions
 * @param {number} [at]
 */
var play = function play(t, playbackOptions, at) {
  (0, _wildernessCore.play)(t, playbackOptions, at);
  tick();
};

/**
 * Calculate the active Timeline Shapes and update the corresponding Nodes.
 * Call recursively until there are no longer any active Timelines.
 *
 * @param {number} [at]
 *
 * @example
 * tick()
 */
var tick = function tick(at) {
  if (!ticks) {
    if (process.env.NODE_ENV !== 'production' && typeof at !== 'undefined' && typeof at !== 'number') {
      throw new TypeError('The tick functions at option must be of type number');
    }

    window.requestAnimationFrame(function () {
      var a = typeof at !== 'undefined' ? at : Date.now();

      var retick = false;

      ticks++;

      for (var i = 0, l = timelines.length; i < l; i++) {
        var t = timelines[i];
        var state = t.state;

        if (state.started && !state.finished && state.rendered) {
          var timelineShapes = t.timelineShapes;
          var frameShapes = (0, _wildernessCore.frame)(t, a);

          for (var _i = 0, _l = timelineShapes.length; _i < _l; _i++) {
            (0, _wildernessDomNode.updateNode)(timelineShapes[_i].shape.node, frameShapes[_i]);
          }

          (0, _wildernessCore.events)(t);

          retick = true;
        }
      }

      ticks--;

      if (retick) {
        tick();
      }
    });
  }
};

/**
 * Extends the Wilderness core timeline function.
 * Pushes each timeline into the timelines array.
 *
 * @param {...(Shape|Object[]|TimelineOptions)[]} props
 *
 * @returns {Timeline}
 *
 * @example
 * timeline(circle, [ square, { queue: -200 } ], { duration: 5000 })
 */
var timeline = function timeline() {
  var t = _wildernessCore.timeline.apply(undefined, arguments);
  timelines.push(t);
  return t;
};

/**
 * An array of every Timeline created.
 */
var timelines = [];

exports.play = play;
exports.tick = tick;
exports.default = timeline;